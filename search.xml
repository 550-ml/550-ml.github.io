<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>模板</title>
    <url>/2023/06/26/hexo-github-bo-ke-da-jian/</url>
    <content><![CDATA[<p><a name="uNA7B"></a></p>
<h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>略，等我想写再写吧<br><a name="HQvUC"></a></p>
<h2 id="二、定制搭建过程"><a href="#二、定制搭建过程" class="headerlink" title="二、定制搭建过程"></a>二、定制搭建过程</h2><p><a name="TtafO"></a></p>
<h3 id="1-Hexo本身文件配置"><a href="#1-Hexo本身文件配置" class="headerlink" title="1. Hexo本身文件配置"></a>1. Hexo本身文件配置</h3><p><a name="caZdc"></a></p>
<h4 id="1-1-Hexo基本配置"><a href="#1-1-Hexo基本配置" class="headerlink" title="1.1 Hexo基本配置"></a>1.1 Hexo基本配置</h4><p><a name="Xs1KB"></a></p>
<h5 id="1-1-1-网址"><a href="#1-1-1-网址" class="headerlink" title="1.1.1 网址"></a>1.1.1 网址</h5><p><a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a>看这个可以学会改参数<br><a name="CSd5T"></a></p>
<h5 id="1-1-2-Front-matter"><a href="#1-1-2-Front-matter" class="headerlink" title="1.1.2 Front-matter"></a>1.1.2 Front-matter</h5><p>Front-matter 是md文件最上方以 —分隔的区域，用于指定个别文件的变量，举例来说：</p>
<pre><code>title: Hexo+Github博客搭建记录
date: 2019-08-10 21:44:44
</code></pre>
<p>参数描述</p>
<ul>
<li>layout布局</li>
<li>title标题</li>
</ul>
<p>date建立日期updated更新日期comments开启文章的评论功能tags标签（不适用于分页）categories分类（不适用于分页）permalink覆盖文章网址<br><a name="fmv1m"></a></p>
<h3 id="2-Theme"><a href="#2-Theme" class="headerlink" title="2.Theme"></a>2.Theme</h3><p><a name="PuHMZ"></a></p>
<h5 id="2-1-切换主题"><a href="#2-1-切换主题" class="headerlink" title="2.1 切换主题"></a>2.1 切换主题</h5><blockquote>
<p>首先需要明白什么是站点配置文件，什么是主题配置文件，站点配置文件就是根目录下的配置文件，主图配置文件就是主题的文件` </p>
</blockquote>
<p><a name="E7VcE"></a></p>
<h5 id="2-2-tags页面"><a href="#2-2-tags页面" class="headerlink" title="2.2 tags页面"></a>2.2 tags页面</h5><p>在<code> git bath here</code>用以下命令创建tags</p>
<pre><code>hexo new page "tags"
</code></pre>
<p>编辑刚刚创建的<code> hexo new page "tags"</code>页面<br> ···</p>
<pre><code>啊啊啊
</code></pre>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>MarkDown</title>
    <url>/2024/07/03/markdown/</url>
    <content><![CDATA[<p><a name="ixfyf"></a></p>
<h2 id="0-写markdown要用半角标点"><a href="#0-写markdown要用半角标点" class="headerlink" title="0.写markdown要用半角标点"></a>0.写markdown要用半角标点</h2><p><a name="S2Otl"></a></p>
<h2 id="1-标题-注意：标点符号后面要加空格-space就是标题"><a href="#1-标题-注意：标点符号后面要加空格-space就是标题" class="headerlink" title="1.标题 注意：标点符号后面要加空格 # + space就是标题"></a>1.标题 注意：标点符号后面要加空格 # + space就是标题</h2><pre><code># 一级标题
## 二级标题
</code></pre>
<p><a name="ovxgG"></a></p>
<h2 id="2-强调-用-或者-结尾要加一个空格"><a href="#2-强调-用-或者-结尾要加一个空格" class="headerlink" title="2. 强调 [用** 或者_]结尾要加一个空格"></a>2. 强调 [用** 或者_]结尾要加一个空格</h2><p><strong>北京</strong>这就是强i到<br><strong>bejing</strong>这也是强调<br><strong>ctrl+B</strong>也可以是强调<br><a name="j1unO"></a></p>
<h2 id="3-斜体-一个-或者是"><a href="#3-斜体-一个-或者是" class="headerlink" title="3. 斜体[一个*或者是_]"></a>3. 斜体[一个*或者是_]</h2><p><em>斜体</em></p>
<pre><code>这个地方做一个总结
*斜体*
**加粗**
***斜体加加粗*** 
注意空格
</code></pre>
<p><a name="A8AZu"></a></p>
<h2 id="4-删除线-两个波浪线"><a href="#4-删除线-两个波浪线" class="headerlink" title="4.删除线[~~两个波浪线]"></a>4.删除线[~~两个波浪线]</h2><p><del>我宣布个事</del>删除了<br>/<br><a name="ffYD8"></a></p>
<h2 id="5-高亮-试一下高亮"><a href="#5-高亮-试一下高亮" class="headerlink" title="5.高亮[试一下高亮]"></a>5.高亮[试一下高亮]</h2><p>语法就是<code>==</code><br><a name="OkuGV"></a></p>
<h2 id="6-代码-用-96-包围"><a href="#6-代码-用-96-包围" class="headerlink" title="6.代码[用`包围]"></a>6.代码[用`包围]</h2><p><code>zheshiyigedaima</code>代码成功了<br><a name="CPkfX"></a></p>
<h2 id="7-代码块-用-96-96-96-回车"><a href="#7-代码块-用-96-96-96-回车" class="headerlink" title="7.代码块[ 用```+回车]"></a>7.代码块[ 用```+回车]</h2><p><a name="NVSQv"></a></p>
<h2 id="8-引用-gt-空格-回车"><a href="#8-引用-gt-空格-回车" class="headerlink" title="8.引用[ >+空格+回车]"></a>8.引用[ &gt;+空格+回车]</h2><blockquote>
<p>这就是一个引用</p>
</blockquote>
<p><a name="nVXhv"></a></p>
<h2 id="9-列表-space-Tab往后缩进-enter往前缩进"><a href="#9-列表-space-Tab往后缩进-enter往前缩进" class="headerlink" title="9.列表[- +space][Tab往后缩进][enter往前缩进]"></a>9.列表[- +space][Tab往后缩进][enter往前缩进]</h2><ul>
<li>这就是第一个缩进,加粗怎么说<strong>加粗</strong>然后斜体_就我用的最多<strong>加粗且斜体</strong>_<del>删除线</del>怎么说还有高亮<ul>
<li>还挺是为</li>
</ul>
</li>
<li>这不就行了<ul>
<li>没什么问题<br><a name="BlIG4"></a></li>
</ul>
</li>
</ul>
<h2 id="10-有序列表-1-space即可"><a href="#10-有序列表-1-space即可" class="headerlink" title="10.有序列表[1 . space即可]"></a>10.有序列表[1 . space即可]</h2><p><a name="D2Max"></a></p>
<h2 id="11-上下标"><a href="#11-上下标" class="headerlink" title="11.上下标[^,~]"></a>11.上下标[^,~]</h2><p>27788哈哈哈22<br>H2o水怎么说<br><a name="bfyy9"></a></p>
<h2 id="11-链接"><a href="#11-链接" class="headerlink" title="11. 链接[[]+()]"></a>11. 链接[[]+()]</h2><p><a href="http">来看看word</a><br><a name="kGYxI"></a></p>
<h2 id="13-任务列表-x"><a href="#13-任务列表-x" class="headerlink" title="13.任务列表[[]  [x]]"></a>13.任务列表[[]  [x]]</h2><ul>
<li><input checked="" disabled="" type="checkbox"> <br>
<a name="IlKEC"></a></li>
</ul>
<h2 id="14-表格"><a href="#14-表格" class="headerlink" title="14.表格"></a>14.表格</h2><table>
<thead>
<tr>
<th>学号</th>
<th>姓名</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>这一行是对齐方式</th>
<th>:—:</th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><a name="jJSb9"></a></p>
<h2 id="15-分割线"><a href="#15-分割线" class="headerlink" title="15.分割线"></a>15.分割线</h2><p><code>*** 或 ——————</code>就可以了</p>
]]></content>
      <categories>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>MarkDown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/06/26/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span>
</code></pre>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server
</code></pre>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate
</code></pre>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy
</code></pre>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>Vim</title>
    <url>/2024/07/03/vim/</url>
    <content><![CDATA[<p><a name="ZiI1U"></a></p>
<h2 id="批量修改：选中修改行-：s-old-new-g"><a href="#批量修改：选中修改行-：s-old-new-g" class="headerlink" title="批量修改：选中修改行+：s/old/new/g"></a>批量修改：<code>选中修改行</code>+<code>：s/old/new/g</code></h2><p><a name="fnHzu"></a></p>
<h2 id="回退到上一次修改的位置：-96-96-96-2"><a href="#回退到上一次修改的位置：-96-96-96-2" class="headerlink" title="回退到上一次修改的位置：```*2"></a>回退到上一次修改的位置：```*2</h2><p><a name="VwGCk"></a></p>
<h2 id="在行后添加分号：A-；"><a href="#在行后添加分号：A-；" class="headerlink" title="在行后添加分号：A+；"></a>在行后添加分号：<code>A</code>+<code>；</code></h2><p><a name="wDXai"></a></p>
<h2 id="插入头文件再返回：gg-O"><a href="#插入头文件再返回：gg-O" class="headerlink" title="插入头文件再返回：gg+O"></a>插入头文件再返回：<code>gg</code>+<code>O</code></h2><p><a name="p0Nnx"></a></p>
<h2 id="修改if中的内容：ciw-co-quot-da-quot"><a href="#修改if中的内容：ciw-co-quot-da-quot" class="headerlink" title="修改if中的内容：ciw``co&quot;``da&quot;"></a>修改if中的内容：<code>ciw``co"``da"</code></h2><p><a name="q8Ghj"></a></p>
<h2 id="复制全文：yae"><a href="#复制全文：yae" class="headerlink" title="复制全文：yae"></a>复制全文：<code>yae</code></h2><p><a name="I7GEU"></a></p>
<h2 id="修改变量名：-选中所有，ciw修改，-重复操作的宏"><a href="#修改变量名：-选中所有，ciw修改，-重复操作的宏" class="headerlink" title="修改变量名：*选中所有，ciw修改，.重复操作的宏"></a>修改变量名：<code>*</code>选中所有，<code>ciw</code>修改，<code>.</code>重复操作的宏</h2><p><a name="euDlJ"></a></p>
<h2 id="进入一次normal模式：-o"><a href="#进入一次normal模式：-o" class="headerlink" title="进入一次normal模式：^o"></a>进入一次normal模式：<code>^o</code></h2><p><a name="QvOLG"></a></p>
<h2 id="匹配修改：：s-touch-toch-g"><a href="#匹配修改：：s-touch-toch-g" class="headerlink" title="匹配修改：：s/touch/toch/g"></a>匹配修改：<code>：s/touch/toch/g</code></h2><p><a name="Kxgxe"></a></p>
<h2 id="匹配到行首："><a href="#匹配到行首：" class="headerlink" title="匹配到行首：^"></a>匹配到行首：^</h2><p><a name="dKVX5"></a></p>
<h2 id="快速跳转：17gg"><a href="#快速跳转：17gg" class="headerlink" title="快速跳转：17gg"></a>快速跳转：17<code>gg</code></h2><p><a name="DkCrb"></a></p>
<h2 id="缩进：-gt"><a href="#缩进：-gt" class="headerlink" title="缩进：>"></a>缩进：<code>&gt;</code></h2><p><a name="R7u5n"></a></p>
<h2 id="一、vscode快捷键"><a href="#一、vscode快捷键" class="headerlink" title="一、vscode快捷键"></a>一、vscode快捷键</h2><p>^C+B:<br>^C+P<br>^C+Shift+P<br>^C+1<br>^C+,<br><a name="cbVVG"></a></p>
<h2 id="二、术语"><a href="#二、术语" class="headerlink" title="二、术语"></a>二、术语</h2><hr>
<ul>
<li>模式：n,i,v</li>
<li>操作：d,c,y,f+作用范围</li>
<li>范围：<br><a name="jUR5r"></a></li>
</ul>
<h2 id="三、入门"><a href="#三、入门" class="headerlink" title="三、入门"></a>三、入门</h2><ul>
<li>标准模式：<code>：</code>加一些东西，可以执行命令</li>
<li>插入模式：<code>i</code>进行插入模式，也就是编辑模式，按<code>ESC</code>退出<br><a name="occjt"></a></li>
</ul>
<h3 id="执行命令：：conmand"><a href="#执行命令：：conmand" class="headerlink" title="执行命令：：conmand"></a>执行命令：<code>：conmand</code></h3><p><a name="DI7Vm"></a></p>
<h3 id="退出Vim-q-ZZ"><a href="#退出Vim-q-ZZ" class="headerlink" title="退出Vim::q/ZZ"></a>退出Vim:<code>:q/ZZ</code></h3><ul>
<li><code>:q</code>:退出，不做任何改动</li>
<li><code>:q!</code>：退出，丢弃改动</li>
<li><code>：wq</code>：保存并退出</li>
<li><code>ZZ</code>：等于上面的保存并退出<br><a name="ieBYu"></a></li>
</ul>
<h3 id="保存文件：：w"><a href="#保存文件：：w" class="headerlink" title="保存文件：：w"></a>保存文件：<code>：w</code></h3><p><code>:w</code>：保存<br><code>w&lt;filename&gt;</code>：保存到新文件<br><a name="MoOgX"></a></p>
<h3 id="M-基本移动：h-j-k-l"><a href="#M-基本移动：h-j-k-l" class="headerlink" title="[M]基本移动：h,j,k,l"></a>[M]基本移动：<code>h,j,k,l</code></h3><p>分别对应<code>左下上右</code><br><a name="biVD1"></a></p>
<h3 id="M-前往第一行-x2F-最后一行：gg-G"><a href="#M-前往第一行-x2F-最后一行：gg-G" class="headerlink" title="[M]前往第一行/最后一行：gg``G"></a>[M]前往第一行/最后一行：<code>gg``G</code></h3><p><code>gg</code>：前往第一行<br><code>G</code>：前往最后一行<br><a name="sj3vQ"></a></p>
<h3 id="M-前往第n行：nG-：n"><a href="#M-前往第n行：nG-：n" class="headerlink" title="[M]前往第n行：nG``：n"></a>[M]前往第n行：<code>nG``：n</code></h3><p>不多解释了，打打就知道<br><a name="IdGn8"></a></p>
<h3 id="M-移动一个单词：w-e"><a href="#M-移动一个单词：w-e" class="headerlink" title="[M]移动一个单词：w``e"></a>[M]移动一个单词：<code>w``e</code></h3><p><code>w</code>：移动到下一个单词的首字符<br><code>e</code>：移动到这个单词的味字符<br><a name="yXqxz"></a></p>
<h3 id="M-移动到上个单词：b"><a href="#M-移动到上个单词：b" class="headerlink" title="[M]移动到上个单词：b"></a>[M]移动到上个单词：<code>b</code></h3><p><code>b</code>：向前移动<br><code>nb</code>：向前移动n个<br><a name="KGKA1"></a></p>
<h3 id="M-移动到上个单词的末尾：ge"><a href="#M-移动到上个单词的末尾：ge" class="headerlink" title="[M]移动到上个单词的末尾：ge"></a>[M]移动到上个单词的末尾：<code>ge</code></h3><p><code>ge</code>:移动到上个单词的末尾<br><a name="BUeIJ"></a></p>
<h3 id="M-移动到这一行的首尾：-0"><a href="#M-移动到这一行的首尾：-0" class="headerlink" title="[M]移动到这一行的首尾：$``0``_``^"></a>[M]移动到这一行的首尾：<code>$``0``_``^</code></h3><p><code>$</code>：尾<br><code>0</code>：第0列<br><code>_``^</code>：非空0列<br><a name="DaS4I"></a></p>
<h3 id="M-b-f移动一页，-y-e移动一行视线"><a href="#M-b-f移动一页，-y-e移动一行视线" class="headerlink" title="[M]^b,^f移动一页，^y,^e移动一行视线"></a>[M]^b,^f移动一页，^y,^e移动一行视线</h3><p><a name="JOVp3"></a></p>
<h3 id="E-删除字符：x-X"><a href="#E-删除字符：x-X" class="headerlink" title="[E]删除字符：x``X"></a>[E]删除字符：<code>x``X</code></h3><p><code>x</code>：删除当前字符<br><code>X</code>：删除上一个<br><a name="BxOLm"></a></p>
<h3 id="E-删除单词：dw"><a href="#E-删除单词：dw" class="headerlink" title="[E]删除单词：dw"></a>[E]删除单词：<code>dw</code></h3><p><code>dw</code>：<br><code>dW</code>：<br><a name="WfmIn"></a></p>
<h3 id="E-删除当前行：dd"><a href="#E-删除当前行：dd" class="headerlink" title="[E]删除当前行：dd"></a>[E]删除当前行：<code>dd</code></h3><p><a name="tfHmT"></a></p>
<h3 id="E-插入模式：i-a"><a href="#E-插入模式：i-a" class="headerlink" title="[E]插入模式：i``a"></a>[E]插入模式：<code>i``a</code></h3><p><code>i</code>：在之前插入<br><code>a</code>：在之后插入<br><a name="XlrZq"></a></p>
<h3 id="E-在行首或行尾插入：I-A"><a href="#E-在行首或行尾插入：I-A" class="headerlink" title="[E]在行首或行尾插入：I``A"></a>[E]在行首或行尾插入：<code>I``A</code></h3><p><a name="vhvoo"></a></p>
<h3 id="E-在当前行上或下插入一行：o-O"><a href="#E-在当前行上或下插入一行：o-O" class="headerlink" title="[E]在当前行上或下插入一行：o``O"></a>[E]在当前行上或下插入一行：<code>o``O</code></h3><p><a name="hK5CE"></a></p>
<h3 id="E-改变大小写："><a href="#E-改变大小写：" class="headerlink" title="[E]改变大小写：~"></a>[E]改变大小写：<code>~</code></h3><p><a name="OTAns"></a></p>
<h3 id="F-移动到指定字符：f-lt-target-gt"><a href="#F-移动到指定字符：f-lt-target-gt" class="headerlink" title="[F]移动到指定字符：f<target>"></a>[F]移动到指定字符：<code>f&lt;target&gt;</code></h3><p><a name="ugljW"></a></p>
<h3 id="E-撤销、重做：u-C-r"><a href="#E-撤销、重做：u-C-r" class="headerlink" title="[E]撤销、重做：u``^C+r"></a>[E]撤销、重做：<code>u``^C+r</code></h3><p><code>u</code>：撤销<br><code>^C+r</code>：重做<br><a name="UQVdV"></a></p>
<h3 id="E-全局替換：gg-s-x2F-torch-x2F-toch-x2F-g"><a href="#E-全局替換：gg-s-x2F-torch-x2F-toch-x2F-g" class="headerlink" title="[E]全局替換：gg,:%s/torch/toch/g"></a>[E]全局替換：gg,:%s/torch/toch/g</h3><p><a name="vdw6P"></a></p>
<h3 id="E-ciw：在單詞内部改；di-去掉括号里的内容；da-：去掉包含括号的"><a href="#E-ciw：在單詞内部改；di-去掉括号里的内容；da-：去掉包含括号的" class="headerlink" title="[E]ciw：在單詞内部改；di(:去掉括号里的内容；da(：去掉包含括号的"></a>[E]ciw：在單詞内部改；di(:去掉括号里的内容；da(：去掉包含括号的</h3><p><a name="GrnuF"></a></p>
<h2 id="四、vim一些模式"><a href="#四、vim一些模式" class="headerlink" title="四、vim一些模式"></a>四、vim一些模式</h2><p><a name="yl15h"></a></p>
<h3 id="重复n次操作：n-lt-action-gt"><a href="#重复n次操作：n-lt-action-gt" class="headerlink" title="重复n次操作：n<action>"></a>重复n次操作：<code>n&lt;action&gt;</code></h3><p>Vim 中几乎所有操作都可以通过一个 n 前缀来重复 n 次<br><a name="sEevu"></a></p>
<h3 id="操作任意范围："><a href="#操作任意范围：" class="headerlink" title="操作任意范围： "></a>操作任意范围：<code> </code></h3><p>举例<br><a name="y15rE"></a></p>
<h3 id="两个字母重复：dd-cc-yy-guu"><a href="#两个字母重复：dd-cc-yy-guu" class="headerlink" title="两个字母重复：dd``cc``yy``guu"></a>两个字母重复：<code>dd``cc``yy``guu</code></h3><p><code>dd</code>：删除整行<br><code>cc</code>：删除整行，编辑模式<br><code>yy</code>：复制整行<br><code>guu</code>：整行小写<br><code>gUU</code>：整行大写<br><a name="zPwau"></a></p>
<h3 id="重复上次操作："><a href="#重复上次操作：" class="headerlink" title="重复上次操作：.``,``;"></a>重复上次操作：<code>.``,``;</code></h3><p><code>.</code>：比如<code>A123&lt;ESC&gt;</code>就可以重复操作<br><code>,``;</code>：重复查找操作<br><a name="S2Sru"></a></p>
<h2 id="五、进阶"><a href="#五、进阶" class="headerlink" title="五、进阶"></a>五、进阶</h2><p><a name="BOBew"></a></p>
<h3 id="E-替换一个字符：r"><a href="#E-替换一个字符：r" class="headerlink" title="[E]:替换一个字符：r"></a>[E]:替换一个字符：<code>r</code></h3><p><code>r</code>：换掉一个字符<br><a name="xkxB3"></a></p>
<h3 id="E-替换连续多个字符：R"><a href="#E-替换连续多个字符：R" class="headerlink" title="[E]替换连续多个字符：R"></a>[E]替换连续多个字符：<code>R</code></h3><p><code>R</code>：按住R就相当于进入了替代模式<br><a name="eZG8Q"></a></p>
<h3 id="E-更改一个范围的内容：c"><a href="#E-更改一个范围的内容：c" class="headerlink" title="[E]更改一个范围的内容：c"></a>[E]更改一个范围的内容：<code>c</code></h3><p><a name="zctMO"></a></p>
<h3 id="E-删除一个字符，并进入编辑模式：s"><a href="#E-删除一个字符，并进入编辑模式：s" class="headerlink" title="[E]删除一个字符，并进入编辑模式：s"></a>[E]删除一个字符，并进入编辑模式：<code>s</code></h3><p><a name="Eecqc"></a></p>
<h3 id="E-删除整行，并进入编辑模式：S-cc"><a href="#E-删除整行，并进入编辑模式：S-cc" class="headerlink" title="[E]删除整行，并进入编辑模式：S``cc"></a>[E]删除整行，并进入编辑模式：<code>S``cc</code></h3><p><a name="UhGgk"></a></p>
<h3 id="E-从当前位置开始，删除整行右侧：D"><a href="#E-从当前位置开始，删除整行右侧：D" class="headerlink" title="[E]从当前位置开始，删除整行右侧：D"></a>[E]从当前位置开始，删除整行右侧：<code>D</code></h3><p><a name="mTt9n"></a></p>
<h3 id="E-从当前位置删除整行，并进入编辑模式：C"><a href="#E-从当前位置删除整行，并进入编辑模式：C" class="headerlink" title="[E]从当前位置删除整行，并进入编辑模式：C"></a>[E]从当前位置删除整行，并进入编辑模式：<code>C</code></h3><p><a name="vQ0qm"></a></p>
<h3 id="V-可视模式下，选择内容：v-V-C-v"><a href="#V-可视模式下，选择内容：v-V-C-v" class="headerlink" title="[V]可视模式下，选择内容：v``V``^C+v"></a>[V]可视模式下，选择内容：<code>v``V``^C+v</code></h3><p><code>v</code>：从当前选择<br><code>V</code>：选择行<br><code>^C+V</code>：选择块<br>使用贴士：</p>
<ul>
<li><code>V</code>选择整行，<code>j</code>进行向下移动，<code>y</code>复制，<code>p</code>粘贴<br><a name="XPAlH"></a></li>
</ul>
<h3 id="E-复制下一个单词：yw"><a href="#E-复制下一个单词：yw" class="headerlink" title="[E]复制下一个单词：yw"></a>[E]复制下一个单词：<code>yw</code></h3><p><code>yw</code>复制下一个单词，<code>p</code>粘贴<br><code>y``c``d</code>都可以跟作用范围<br><code>y$</code>：复制到最后一个<br><code>yh</code>：复制前面一个字符<br><code>yy</code>：复制一整行<br><code>dd</code>：删除一整行<br><a name="ghFYH"></a></p>
<h3 id="E-复制接下来几行：yy-2yy"><a href="#E-复制接下来几行：yy-2yy" class="headerlink" title="[E]复制接下来几行：yy``2yy"></a>[E]复制接下来几行：<code>yy``2yy</code></h3><p><a name="wSVWT"></a></p>
<h3 id="E-粘贴到上一行、下一行：p-P"><a href="#E-粘贴到上一行、下一行：p-P" class="headerlink" title="[E]粘贴到上一行、下一行：p``P"></a>[E]粘贴到上一行、下一行：<code>p``P</code></h3><p><code>dd</code>+<code>p</code>：删除，加入到缓冲区，put放置<br><a name="ApR8p"></a></p>
<h3 id="当前行置顶，zt-zz-zb"><a href="#当前行置顶，zt-zz-zb" class="headerlink" title="当前行置顶，zt``zz``zb"></a>当前行置顶，<code>zt``zz``zb</code></h3><p><a name="iYG9p"></a></p>
<h3 id="缩进：-lt-gt"><a href="#缩进：-lt-gt" class="headerlink" title="缩进：<``>"></a>缩进：<code>&lt;``&gt;</code></h3>]]></content>
      <categories>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/2024/07/04/git/</url>
    <content><![CDATA[<p><a name="ubm5W"></a></p>
<h2 id="一、Git的数据模型"><a href="#一、Git的数据模型" class="headerlink" title="一、Git的数据模型"></a>一、Git的数据模型</h2><p><a name="PLXpU"></a></p>
<h3 id="快照"><a href="#快照" class="headerlink" title="快照"></a>快照</h3><p>把目录称之为“树”，文件叫做Blob对象<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1693898808150-2cdb9aab-0e42-41c1-9f42-c7376c6d857d.png#averageHue=%23f3f3f3&amp;clientId=ub47429f8-47a0-4&amp;from=paste&amp;height=175&amp;id=u3603191d&amp;originHeight=219&amp;originWidth=725&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=17592&amp;status=done&amp;style=none&amp;taskId=uf853008c-bfa2-4fea-8af4-2708d39a1a9&amp;title=&amp;width=580" alt="image.png"><br><code>folder-tree</code><br><a name="Lvda4"></a></p>
<h3 id="历史记录建模：关联快照"><a href="#历史记录建模：关联快照" class="headerlink" title="历史记录建模：关联快照"></a>历史记录建模：关联快照</h3><p>有向无环图<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1693899282047-416b5a81-8e61-4537-b818-cfa2e3d3a4d8.png#averageHue=%23f7f7f7&amp;clientId=ub47429f8-47a0-4&amp;from=paste&amp;height=109&amp;id=u7138cbd6&amp;originHeight=136&amp;originWidth=725&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=4095&amp;status=done&amp;style=none&amp;taskId=u0bac6b82-36ac-4ed6-b77b-512f9466806&amp;title=&amp;width=580" alt="image.png"><br><a name="xxfK9"></a></p>
<h3 id="数据模型及伪代码表示"><a href="#数据模型及伪代码表示" class="headerlink" title="数据模型及伪代码表示"></a>数据模型及伪代码表示</h3><pre class=" language-python"><code class="language-python">type blob <span class="token operator">=</span> array<span class="token operator">&lt;</span>byte<span class="token operator">></span> 一个file就是一堆字节流
type tree <span class="token operator">=</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> tree<span class="token operator">|</span> blob<span class="token operator">></span>  tree映射的就是文件
type commit <span class="token operator">=</span> struct<span class="token punctuation">{</span>
    parent array<span class="token operator">&lt;</span>commit<span class="token operator">></span>
    auther
    message<span class="token punctuation">:</span> string
    snapshot<span class="token punctuation">:</span> tree
<span class="token punctuation">}</span> 每一次的快照称作commit<span class="token punctuation">,</span>记录
</code></pre>
<p><a name="K4knU"></a></p>
<h3 id="对象和内存寻址"><a href="#对象和内存寻址" class="headerlink" title="对象和内存寻址"></a>对象和内存寻址</h3><p>哈希函数：把一堆数据转变成一个短的字符<br>Git的对象：上面已经说了三种<br>object表</p>
<pre class=" language-python"><code class="language-python">objects <span class="token operator">=</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> object<span class="token operator">></span>

<span class="token keyword">def</span> <span class="token function">store</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>
    id <span class="token operator">=</span> sha1<span class="token punctuation">(</span>object<span class="token punctuation">)</span>
    objects<span class="token punctuation">[</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> object

<span class="token keyword">def</span> <span class="token function">load</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> objects<span class="token punctuation">[</span>id<span class="token punctuation">]</span>
</code></pre>
<p><a name="yUjiw"></a></p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>维护一组引用<br>Git 的解决方法是给这些哈希值赋予人类可读的名字，也就是引用（references）。引用是指向提交的指针。与对象不同的是，它是可变的（引用可以被更新，指向新的提交）。例如，master 引用通常会指向主分支的最新一次提交。	<br><a name="enrki"></a></p>
<h2 id="二、Git的命令行接口"><a href="#二、Git的命令行接口" class="headerlink" title="二、Git的命令行接口"></a>二、Git的命令行接口</h2><p><a name="ZYDKW"></a></p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>-<code>git diff &lt;filename&gt;</code>：显示与暂存区的文件差异<br>-<code>git add -A</code>：添加所有的修改文件到暂存区、<br>-<code>git commit</code>：提交文件，<code>^X+Y+</code>enter`退出</p>
<p><a name="praCx"></a></p>
<h3 id="分支和合并"><a href="#分支和合并" class="headerlink" title="分支和合并"></a>分支和合并</h3><p>-<code>git branch &lt;name&gt;</code>：创建分支<br>-<code>git checkout &lt;name&gt;</code>：切换分支<br>-<code>git checkout -b &lt;name&gt;</code>：创建分支并切换到分支<br><a name="ncnNf"></a></p>
<h3 id="远端操作"><a href="#远端操作" class="headerlink" title="远端操作"></a>远端操作</h3><p>-<code>git remote</code>：列出远端<br>-<code>git clone</code>：克隆仓库<br>-<code>git remote add name usl</code>：添加新的远程<br>-<code>git push &lt;remote&gt; &lt;local branch&gt;:&lt;remote branch&gt;</code>：将对象传送至远端并更新远端引用</p>
<p><a name="YJQte"></a></p>
<h2 id="三、gitignore-怎么写"><a href="#三、gitignore-怎么写" class="headerlink" title="三、gitignore 怎么写"></a>三、gitignore 怎么写</h2><p><a name="ksVUT"></a></p>
<h3 id="3-1-一个文件或者文件夹"><a href="#3-1-一个文件或者文件夹" class="headerlink" title="3.1 一个文件或者文件夹"></a>3.1 一个文件或者文件夹</h3><p><a name="KnpLm"></a></p>
<h3 id="3-2-特定的文件或者文件夹"><a href="#3-2-特定的文件或者文件夹" class="headerlink" title="3.2 特定的文件或者文件夹"></a>3.2 特定的文件或者文件夹</h3><p><code>img*</code><br><code>*.md</code><br># 忽略所有 .md 文件<br>.md</p>
<h1 id="不忽略-README-md-文件-README-md"><a href="#不忽略-README-md-文件-README-md" class="headerlink" title="不忽略 README.md 文件!README.md"></a>不忽略 README.md 文件<br>!README.md</h1>]]></content>
      <categories>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell</title>
    <url>/2024/07/04/shell/</url>
    <content><![CDATA[<p><a name="AiypF"></a></p>
<h3 id="安装shell"><a href="#安装shell" class="headerlink" title="安装shell"></a>安装shell</h3><p>windows 的powershell并不好，在这里要安装相应的环境，搜索ubuntu+windows终端进行安装<br>之后在按照语法学习。<br><a name="UwHMD"></a></p>
<h3 id="使用shell"><a href="#使用shell" class="headerlink" title="使用shell"></a>使用shell</h3><p><a name="QPBfY"></a></p>
<h4 id="torch-创建文件"><a href="#torch-创建文件" class="headerlink" title="torch 创建文件"></a>torch 创建文件</h4><ul>
<li><code>torch+sleep.c创建文件</code><br><a name="eudNV"></a></li>
</ul>
<h4 id="mv-重命名文件"><a href="#mv-重命名文件" class="headerlink" title="mv 重命名文件"></a>mv 重命名文件</h4><ul>
<li><code>mv file1 file2</code>重命名<br><a name="ysq8T"></a></li>
</ul>
<h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><pre><code>PS C:\Users\24612&gt; date

2023年5月8日 19:58:54
</code></pre>
<p><a name="StJRU"></a></p>
<h4 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h4><p>可以打印后面的变量</p>
<pre><code>echo hello
</code></pre>
<p>打印字符串</p>
<pre><code>echo "hello world"
echo hello\ world
</code></pre>
<p>echo怎么知道的：环境变量</p>
<pre><code>gcm echo/which echo
</code></pre>
<p><a name="yAozZ"></a></p>
<h4 id="pwd"><a href="#pwd" class="headerlink" title="pwd"></a>pwd</h4><p>当前工作路径<br><a name="aD6QK"></a></p>
<h4 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h4><p>更改路径<br>··<br>cd .. 向前访问<br>在这个阶段，还有几个趁手的命令是您需要掌握的，例如 mv（用于重命名或移动文件）、 cp（拷贝文件）以及 mkdir（新建文件夹）。<br><a name="gYa3M"></a></p>
<h4 id="ls-Get-ChildItem"><a href="#ls-Get-ChildItem" class="headerlink" title="ls Get-ChildItem"></a>ls Get-ChildItem</h4><p>列出当前目录下文件<br>Get-ChildItem</p>
<pre class=" language-bash"><code class="language-bash">目录: C:\


Mode                 LastWriteTime         Length Name
----                 -------------         ------ ----
d-----         2023/2/21     12:34                LenovoSoftstore
d-----         2023/1/29      7:50                PerfLogs
d-r---          2023/5/5     23:04                Program Files
d-r---         2023/4/18     15:48                Program Files <span class="token punctuation">(</span>x86<span class="token punctuation">)</span>
d-r---         2023/1/28     17:04                Users
d-----         2023/4/12     17:19                Windows
</code></pre>
<p>Mode 中的 d 和 a 字母表示目录和存档。你会发现 r 表示只读，h 表示隐藏，l 表示链接，s 表示系统。<br>Get-ChildItem -Path C:\record<br>以下命令列出目录 C:\record 中的所有文件和目录。 -Path 参数用于指定路径。<br>等价ls-l</p>
<pre class=" language-bash"><code class="language-bash">Get-ChildItem <span class="token operator">|</span> Format-Table Mode, @<span class="token punctuation">{</span>N<span class="token operator">=</span><span class="token string">'Owner'</span><span class="token punctuation">;</span>E<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span>Get-Acl <span class="token variable">$_</span>.FullName<span class="token punctuation">)</span>.Owner<span class="token punctuation">}</span><span class="token punctuation">}</span>, Length, LastWriteTime, @<span class="token punctuation">{</span>N<span class="token operator">=</span><span class="token string">'Name'</span><span class="token punctuation">;</span>E<span class="token operator">=</span><span class="token punctuation">{</span>if<span class="token punctuation">(</span><span class="token variable">$_</span>.Target<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$_</span>.Name+<span class="token string">' -> '</span>+<span class="token variable">$_</span>.Target<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token variable">$_</span>.Name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
</code></pre>
<p><a name="ZHlXA"></a></p>
<h4 id="mv"><a href="#mv" class="headerlink" title="mv"></a>mv</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1683550217647-6a253633-cf5b-4665-a8e4-c516a8ba334d.png#averageHue=%231f2220&amp;clientId=u68e2ffc3-bee3-4&amp;from=paste&amp;height=54&amp;id=u44b37a27&amp;originHeight=68&amp;originWidth=321&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=22832&amp;status=done&amp;style=none&amp;taskId=u031acf98-9697-4ce2-9cb0-aade565cb8d&amp;title=&amp;width=256.8" alt="image.png"><br><a name="dEM5w"></a></p>
<h4 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h4><p><a name="IWljZ"></a></p>
<h4 id="man-获取帮助"><a href="#man-获取帮助" class="headerlink" title="man 获取帮助"></a>man 获取帮助</h4><p>“ctrl+ l”清空<br><a name="t385a"></a></p>
<h4 id="lt-gt-输入输出重新定向"><a href="#lt-gt-输入输出重新定向" class="headerlink" title="<>输入输出重新定向"></a>&lt;&gt;输入输出重新定向</h4><p>这里就要将一个例子<br>cd E: #跳转到E盘<br>echo hello &gt; hello.txt # 定向输出流<br>car hello.txt # cat会输出文件内容<br><a name="c0eVw"></a></p>
<h4 id="gt-gt-代表追加"><a href="#gt-gt-代表追加" class="headerlink" title=">>代表追加"></a>&gt;&gt;代表追加</h4><p><a name="Eu1if"></a></p>
<h4 id="Tail-n输出几行"><a href="#Tail-n输出几行" class="headerlink" title="Tail -n输出几行"></a>Tail -n输出几行</h4><pre class=" language-bash"><code class="language-bash">PS E:\MIT<span class="token operator">></span>  <span class="token function">cat</span> .\hello.txt -Tail 1
hello2
</code></pre>
]]></content>
      <categories>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Tmux</title>
    <url>/2024/07/04/tmux/</url>
    <content><![CDATA[<p><a name="GaeOp"></a></p>
<h3 id="一、会话操作："><a href="#一、会话操作：" class="headerlink" title="一、会话操作："></a>一、会话操作：</h3><p><strong>启动会话</strong>：<code>tmux new -s &lt;name&gt;</code><br><strong>查看会话</strong>：<code>tmux ls</code><br><strong>分离会话</strong>：<code>tmux detach</code><br><strong>恢复会话</strong>：<code>tmux attach -t &lt;name&gt;</code><br><strong>重命名</strong>：<code>tmux rename-session -t &lt;ole name&gt; &lt;new name&gt;</code><br><strong>关闭会话</strong>：<code>tmux kill-session -t &lt;name&gt;</code><br><strong>关闭所有会话</strong>：<code>tmux kill-server</code><br><a name="BBbjd"></a></p>
<h3 id="二、快捷键"><a href="#二、快捷键" class="headerlink" title="二、快捷键"></a>二、快捷键</h3><p>前导键：<code>^b</code></p>
<ul>
<li><code>s</code>列出会话</li>
<li><code>$</code>：重命名</li>
<li><code>d</code>：断开</li>
<li><code>^z</code>：挂起</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2024/png/34430616/1706683690097-81a187c2-29de-4b2c-91eb-dded6f74962a.png#averageHue=%23fdfcfa&amp;clientId=u04ac9345-4680-4&amp;from=paste&amp;height=478&amp;id=u4b52abbe&amp;originHeight=598&amp;originWidth=815&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=142070&amp;status=done&amp;style=none&amp;taskId=u23b74d58-0d2a-402f-95df-fbc3617acb0&amp;title=&amp;width=652" alt="image.png"></p>
]]></content>
      <categories>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>Tmux</tag>
      </tags>
  </entry>
  <entry>
    <title>Shell第二节</title>
    <url>/2024/07/04/shell-di-er-jie/</url>
    <content><![CDATA[<h2 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h2><h3 id="一、变量赋值的方式"><a href="#一、变量赋值的方式" class="headerlink" title="一、变量赋值的方式"></a>一、变量赋值的方式</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1683719775509-be219b23-d595-4bd7-ae4f-2b1be5a4625c.png#averageHue=%232e323a&amp;clientId=ub1622ae7-0a2c-4&amp;from=paste&amp;height=325&amp;id=u42f5e231&amp;originHeight=406&amp;originWidth=614&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=48346&amp;status=done&amp;style=none&amp;taskId=ud6ec8172-3d48-4257-8393-2c200e85df9&amp;title=&amp;width=491.2" alt="image.png"></p>
<ul>
<li>$表示后面的为变量</li>
<li>“”可以为变量赋值</li>
<li>‘’无法为变量赋值</li>
</ul>
<p>和其他大多数的编程语言一样，bash也支持if, case, while 和 for 这些控制流关键字。同样地， bash 也支持函数，它可以接受参数并基于参数进行操作。下面这个函数是一个例子，它会创建一个文件夹并使用cd进入该文件夹。</p>
<pre class=" language-bash"><code class="language-bash">vim mcd.sh
mcd <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">mkdir</span> -p <span class="token string">"<span class="token variable">$1</span>"</span>
    <span class="token function">cd</span> <span class="token string">"<span class="token variable">$1</span>"</span>
<span class="token punctuation">}</span>
:q<span class="token operator">!</span>退出
</code></pre>
<p>$0 - 脚本名<br>$1 到 $9 - 脚本的参数。 $1 是第一个参数，依此类推。<br>$@ - 所有参数<br>$# - 参数个数<br>$? - 前一个命令的返回值<br>$$ - 当前脚本的进程识别码<br>!! - 完整的上一条命令，包括参数。常见应用：当你因为权限不足执行命令失败时，可以使用 sudo !!再尝试一次。<br>$_ - 上一条命令的最后一个参数。如果你正在使用的是交互式 shell，你可以通过按下 Esc 之后键入 . 来获取这个值。</p>
]]></content>
      <categories>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>Paddle</title>
    <url>/2024/07/04/paddle/</url>
    <content><![CDATA[<p><a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/guides/index_cn.html">https://www.paddlepaddle.org.cn/documentation/doc	s/zh/guides/index_cn.html</a><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1685963705849-de625f1e-1865-40c1-a640-04a2b4a8e502.png#averageHue=%23ededed&amp;clientId=u47272688-ad74-4&amp;from=paste&amp;height=495&amp;id=u2bbf22d4&amp;originHeight=619&amp;originWidth=1125&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=212296&amp;status=done&amp;style=none&amp;taskId=ub52c1274-71fd-4db9-a043-8144e87cdf4&amp;title=&amp;width=900" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1685964808012-b8082bca-354b-431d-b695-40dcb3ff556d.png#averageHue=%23fefefe&amp;clientId=u47272688-ad74-4&amp;from=paste&amp;height=350&amp;id=u4fd69a59&amp;originHeight=437&amp;originWidth=793&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=59012&amp;status=done&amp;style=none&amp;taskId=u7aadcf5c-caa9-43fd-be65-aad073ae983&amp;title=&amp;width=634.4" alt="image.png"><br><a name="LPofn"></a></p>
<h2 id="一、编程"><a href="#一、编程" class="headerlink" title="一、编程"></a>一、编程</h2><p><a name="M47Uv"></a></p>
<h3 id="1-paddle-io"><a href="#1-paddle-io" class="headerlink" title="1.paddle.io"></a>1.paddle.io</h3><p><a name="aOnqW"></a></p>
<h4 id="1-1-Dataset：抽象类，自定义数据集？"><a href="#1-1-Dataset：抽象类，自定义数据集？" class="headerlink" title="1.1 Dataset：抽象类，自定义数据集？"></a>1.1 Dataset：抽象类，自定义数据集？</h4><p>需要数据集继承这个抽象类</p>
<ul>
<li><code>__getitem__</code>：给定索引值，获取指定样本</li>
<li><code> __len__</code>：返回样本个数</li>
</ul>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>io <span class="token keyword">import</span> Dataset

<span class="token comment" spellcheck="true"># define a random dataset</span>
<span class="token keyword">class</span> <span class="token class-name">RandomDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num_samples<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>num_samples <span class="token operator">=</span> num_samples

    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">:</span>
        image <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">784</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'float32'</span><span class="token punctuation">)</span>
        label <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int64'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> image<span class="token punctuation">,</span> label

    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>num_samples

dataset <span class="token operator">=</span> RandomDataset<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dataset<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>dataset<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre>
<p><a name="lzCH9"></a></p>
<h4 id="1-2-Dataloader-多进程读取数据集"><a href="#1-2-Dataloader-多进程读取数据集" class="headerlink" title="1.2 Dataloader:多进程读取数据集"></a>1.2 Dataloader:多进程读取数据集</h4><blockquote>
<p>_class _paddle.io.DataLoader(<em>dataset</em>, <em>feed_list=None</em>, <em>places=None</em>, <em>return_list=False</em>, <em>batch_sampler=None</em>, <em>batch_size=1</em>, <em>shuffle=False</em>, <em>drop_last=False</em>, <em>collate_fn=None</em>, <em>num_workers=0</em>, <em>use_buffer_reader=True</em>, <em>use_shared_memory=True</em>, <em>prefetch_factor=2</em>, <em>timeout=0</em>, <em>worker_init_fn=None</em>)</p>
</blockquote>
<ul>
<li>返回一个迭代器，根据·<code>batch_sampler</code>迭代dataset</li>
<li><code>num_worker</code>&gt;0,采用异步多进程<br><a name="NAW6o"></a></li>
</ul>
<h5 id="参数¶"><a href="#参数¶" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/io/DataLoader_cn.html#canshu">¶</a></h5><ul>
<li><strong>dataset</strong> (Dataset) - DataLoader 从此参数给定数据集中加载数据，此参数必须是 paddle.io.Dataset 或 paddle.io.IterableDataset 的一个子类实例。</li>
<li><strong>feed_list</strong> (list(Tensor)|tuple(Tensor)，可选) - feed 变量列表，由 paddle.static.data() 创建。当 return_list 为 False 时，此参数必须设置。默认值为 None。</li>
<li><strong>places</strong> (list(Place)|tuple(Place)，可选) - 数据需要放置到的 Place 列表。在静态图和动态图模式中，此参数均必须设置。在动态图模式中，此参数列表长度必须是 1。默认值为 None。</li>
<li><strong>return_list</strong> (bool，可选) - 每个设备上的数据是否以 list 形式返回。若 return_list = False，每个设备上的返回数据均是 str -&gt; Tensor 的映射表，其中映射表的 key 是每个输入变量的名称。若 return_list = True，则每个设备上的返回数据均是 list(Tensor)。在动态图模式下，此参数必须为 True。默认值为 False。</li>
<li><strong>batch_sampler</strong> (BatchSampler，可选) - paddle.io.BatchSampler 或其子类的实例，DataLoader 通过 batch_sampler 产生的 mini-batch 索引列表来 dataset 中索引样本并组成 mini-batch。默认值为 None。</li>
<li><strong>batch_size</strong> (int|None，可选) - 每 mini-batch 中样本个数，为 batch_sampler 的替代参数，若 batch_sampler 未设置，会根据 batch_size shuffle drop_last 创建一个 paddle.io.BatchSampler。默认值为 1。</li>
<li><strong>shuffle</strong> (bool，可选) - 生成 mini-batch 索引列表时是否对索引打乱顺序，为 batch_sampler 的替代参数，若 batch_sampler 未设置，会根据 batch_size shuffle drop_last 创建一个 paddle.io.BatchSampler。默认值为 False。</li>
<li><strong>drop_last</strong> (bool，可选) - 是否丢弃因数据集样本数不能被 batch_size 整除而产生的最后一个不完整的 mini-batch，为 batch_sampler 的替代参数，若 batch_sampler 未设置，会根据 batch_size shuffle drop_last 创建一个 paddle.io.BatchSampler。默认值为 False。</li>
<li><strong>collate_fn</strong> (callable，可选) - 通过此参数指定如果将样本列表组合为 mini-batch 数据，当 collate_fn 为 None 时，默认为将样本个字段在第 0 维上堆叠(同 np.stack(…, axis=0) )为 mini-batch 的数据。默认值为 None。</li>
<li><strong>num_workers</strong> (int，可选) - 用于加载数据的子进程个数，若为 0 即为不开启子进程，在主进程中进行数据加载。默认值为 0。</li>
<li><strong>use_buffer_reader</strong> (bool，可选) - 是否使用缓存读取器。若 use_buffer_reader 为 True，DataLoader 会异步地预读取一定数量（默认读取下一个）的 mini-batch 的数据，可加速数据读取过程，但同时会占用少量的 CPU/GPU 存储，即一个 batch 输入数据的存储空间。默认值为 True。</li>
<li><strong>prefetch_factor</strong> (int，可选) - 缓存的 mini-batch 的个数。若 use_buffer_reader 为 True，DataLoader 会异步地预读取 prefetch_factor 个 mini-batch。默认值为 2。</li>
<li><strong>use_shared_memory</strong> (bool，可选) - 是否使用共享内存来提升子进程将数据放入进程间队列的速度，该参数尽在多进程模式下有效(即 num_workers &gt; 0 )，请确认机器上有足够的共享内存空间(如 Linux 系统下 /dev/shm/ 目录空间大小)再设置此参数。默认为 True。</li>
<li><strong>timeout</strong> (int，可选) - 从子进程输出队列获取 mini-batch 数据的超时时间。默认值为 0。</li>
<li><strong>worker_init_fn</strong> (callable，可选) - 子进程初始化函数，此函数会被子进程初始化时被调用，并传递 worker id 作为参数。默认值为 None。<br><a name="PlGHA"></a></li>
</ul>
<h3 id="2-paddle-vision"><a href="#2-paddle-vision" class="headerlink" title="2.paddle.vision"></a>2.paddle.vision</h3><p><a name="wM2zG"></a></p>
<h4 id="2-1-transforms"><a href="#2-1-transforms" class="headerlink" title="2.1 transforms"></a>2.1 transforms</h4><p><a name="KHEZX"></a></p>
<h5 id="2-1-1-Normalize-数据归一化"><a href="#2-1-1-Normalize-数据归一化" class="headerlink" title="2.1.1 Normalize 数据归一化"></a>2.1.1 Normalize 数据归一化</h5><blockquote>
<p>_class _paddle.vision.transforms.Normalize(<em>mean=0.0</em>, <em>std=1.0</em>, <em>data_format=’CHW’</em>, <em>to_rgb=False</em>, <em>keys=None</em>)</p>
</blockquote>
<p><a name="jTam1"></a></p>
<h6 id="参数¶-1"><a href="#参数¶-1" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/Normalize__upper_cn.html#canshu">¶</a></h6><ul>
<li><strong>mean</strong> (list|tuple，可选) - 用于每个通道归一化的均值。</li>
<li><strong>std</strong> (list|tuple，可选) - 用于每个通道归一化的标准差值。</li>
<li><strong>data_format</strong> (str，可选) - 数据的格式，必须为 ‘HWC’ 或 ‘CHW’。 默认值为 ‘CHW’。</li>
<li><strong>to_rgb</strong> (bool，可选) - 是否转换为 rgb 的格式。默认值为 False。</li>
<li><strong>keys</strong> (list[str]|tuple[str]，可选) - 与 BaseTransform 定义一致。默认值为 None。<br><a name="oEXF7"></a></li>
</ul>
<h6 id="形状¶"><a href="#形状¶" class="headerlink" title="形状¶"></a>形状<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/Normalize__upper_cn.html#xingzhuang">¶</a></h6><ul>
<li>img (PIL.Image|np.ndarray|paddle.Tensor) - 输入的图像数据，数据格式为’HWC’。</li>
<li>output (PIL.Image|np.ndarray|Paddle.Tensor) - 返回归一化后的图像数据。<br><a name="cI9pb"></a></li>
</ul>
<h5 id="2-1-2-adjust-brightness-亮度调整"><a href="#2-1-2-adjust-brightness-亮度调整" class="headerlink" title="2.1.2 adjust_brightness 亮度调整"></a>2.1.2 adjust_brightness 亮度调整</h5><blockquote>
<p>paddle.vision.transforms.adjust_brightness(<em>img</em>, <em>brightness_factor</em>)</p>
</blockquote>
<p><a name="DUl5W"></a></p>
<h6 id="参数¶-2"><a href="#参数¶-2" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/adjust_brightness_cn.html#canshu">¶</a></h6><ul>
<li><strong>img</strong> (PIL.Image|np.array|paddle.Tensor) - 输入的图像。</li>
<li><strong>brightness_factor</strong> (float) - 调节图像亮度值的多少，可以是任何非负数。参数等于 0 时输出黑色图像，参数等于 1 时输出原始图像，参数大于 1 时输出图像亮度增强，如参数等于 2 时图像亮度增强两倍。<br><a name="SHRD2"></a></li>
</ul>
<h6 id="返回¶"><a href="#返回¶" class="headerlink" title="返回¶"></a>返回<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/adjust_brightness_cn.html#fanhui">¶</a></h6><p>PIL.Image 或 numpy.ndarray 或 paddle.Tensor，调整后的图像。</p>
<pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np
<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image
<span class="token keyword">from</span> paddle<span class="token punctuation">.</span>vision<span class="token punctuation">.</span>transforms <span class="token keyword">import</span> functional <span class="token keyword">as</span> F

img_path <span class="token operator">=</span> <span class="token string">"/home/aistudio/work/cat.jpg"</span>

image<span class="token operator">=</span>Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># adjust_brightness对输入图像进行亮度值调整</span>
new_img <span class="token operator">=</span> F<span class="token punctuation">.</span>adjust_brightness<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0.4</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 显示图像</span>
display<span class="token punctuation">(</span>image<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
display<span class="token punctuation">(</span>new_img<span class="token punctuation">.</span>resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre>
<p><a name="KhnGs"></a></p>
<h5 id="2-1-3-adjust-hue-调整色调"><a href="#2-1-3-adjust-hue-调整色调" class="headerlink" title="2.1.3 adjust_hue :调整色调"></a>2.1.3 adjust_hue :调整色调</h5><blockquote>
<p>paddle.vision.transforms.adjust_hue(<em>img</em>, <em>hue_factor</em>)</p>
</blockquote>
<p><a name="Xeald"></a></p>
<h6 id="参数¶-3"><a href="#参数¶-3" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/adjust_hue_cn.html#canshu">¶</a></h6><ul>
<li><strong>img</strong> (PIL.Image|np.array|paddle.Tensor) - 输入的图像。</li>
<li><strong>hue_factor</strong> (float) - 图像的色调通道的偏移量。数值应在 [-0.5, 0.5] 。0.5 和-0.5 分别表示 HSV 空间中色相通道正向和负向完全反转，0 表示没有调整色调。因此，-0.5 和 0.5 都会给出一个带有互补色的图像，而 0 则会给出原始图像。<br><a name="VCF8o"></a></li>
</ul>
<h6 id="返回¶-1"><a href="#返回¶-1" class="headerlink" title="返回¶"></a>返回<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/adjust_hue_cn.html#fanhui">¶</a></h6><p>PIL.Image 或 numpy.ndarray 或 paddle.Tensor，调整后的图像。<br><a name="y0Bkx"></a></p>
<h5 id="2-1-4-RandomRotate-随即旋转"><a href="#2-1-4-RandomRotate-随即旋转" class="headerlink" title="2.1.4 RandomRotate: 随即旋转"></a>2.1.4 RandomRotate: 随即旋转</h5><blockquote>
<p>_class _paddle.vision.transforms.RandomRotation(<em>degrees</em>, <em>interpolation=’nearest’</em>, <em>expand=False</em>, <em>center=None</em>, <em>fill=0</em>, <em>keys=None</em>)</p>
</blockquote>
<p><a name="gUOf1"></a></p>
<h6 id="参数¶-4"><a href="#参数¶-4" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/RandomRotation_cn.html#canshu">¶</a></h6><ul>
<li><strong>degrees</strong> (sequence|float|int) - 旋转的角度度数范围。如果度数是数字而不是像（min，max）这样的序列，则会根据 degrees 参数值生成度数范围（-degrees，+degrees）。</li>
<li><strong>interpolation</strong> (str，可选) - 插值的方法。如果这个参数没有设定或者输入图像为单通道，则该参数会根据使用的后端，被设置为 PIL.Image.NEAREST 或者 cv2.INTER_NEAREST。 当使用 pil 作为后端时，支持的插值方法如下：<ul>
<li>“nearest”: Image.NEAREST,</li>
<li>“bilinear”: Image.BILINEAR,</li>
<li>“bicubic”: Image.BICUBIC</li>
</ul>
</li>
<li>当使用 cv2 作为后端时，支持的插值方法如下：<ul>
<li>“nearest”: cv2.INTER_NEAREST,</li>
<li>“bilinear”: cv2.INTER_LINEAR,</li>
<li>“bicubic”: cv2.INTER_CUBIC</li>
</ul>
</li>
<li><strong>expand</strong> (bool，可选) - 是否要对旋转后的图片进行大小扩展，默认值：False。当参数值为 True 时，会对图像大小进行扩展，让其能够足以容纳整个旋转后的图像。当参数值为 False 时，会按照原图像大小保留旋转后的图像。<strong>这个扩展操作的前提是围绕中心旋转且没有平移</strong>。</li>
<li><strong>center</strong> (tuple[int, int]，可选) - 旋转的中心点坐标，原点是图片左上角，默认值是图像的中心点。</li>
<li><strong>fill</strong> (int，可选) - 对图像扩展时填充的值。默认值：0。</li>
<li><strong>keys</strong> (list[str]|tuple[str]，可选) - 与 BaseTransform 定义一致。默认值：None。<br><a name="mYZNf"></a></li>
</ul>
<h6 id="形状¶-1"><a href="#形状¶-1" class="headerlink" title="形状¶"></a>形状<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/RandomRotation_cn.html#xingzhuang">¶</a></h6><ul>
<li>img (PIL.Image|np.ndarray|Paddle.Tensor) - 输入的图像数据，数据格式为’HWC’。</li>
<li>output (PIL.Image|np.ndarray|Paddle.Tensor) - 返回随机旋转一定角度后的图像数据。<br><a name="o4ejJ"></a></li>
</ul>
<h6 id="返回¶-2"><a href="#返回¶-2" class="headerlink" title="返回¶"></a>返回<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/vision/transforms/RandomRotation_cn.html#fanhui">¶</a></h6><p>计算 RandomRotation 的可调用对象。<br><a name="uaA9b"></a></p>
<h3 id="3-paddle-nn"><a href="#3-paddle-nn" class="headerlink" title="3.paddle.nn"></a>3.paddle.nn</h3><p><a name="gGKdz"></a></p>
<h4 id="3-1-Layer"><a href="#3-1-Layer" class="headerlink" title="3.1 Layer"></a>3.1 Layer</h4><blockquote>
<p>_class _paddle.nn.Layer(<em>name_scope=None</em>, <em>dtype=’float32’</em>)</p>
</blockquote>
<p><a name="H2GfC"></a></p>
<h5 id="参数¶-5"><a href="#参数¶-5" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/Layer_cn.html#canshu">¶</a></h5><ul>
<li><strong>name_scope</strong> (str，可选) - 为 Layer 内部参数命名而采用的名称前缀。如果前缀为“mylayer”，在一个类名为 MyLayer 的 Layer 中，参数名为“mylayer_0.w_n”，其中 w 是参数的名称，n 为自动生成的具有唯一性的后缀。如果为 None，前缀名将为小写的类名。默认值为 None。</li>
<li><strong>dtype</strong> (str 可选) - Layer 中参数数据类型。如果设置为 str，则可以是“bool”，“float16”，“float32”，“float64”，“int8”，“int16”，“int32”，“int64”，“uint8”或“uint16”。默认值为 “float32”。<br><a name="uzopI"></a></li>
</ul>
<h5 id="方法¶"><a href="#方法¶" class="headerlink" title="方法¶"></a>方法<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/Layer_cn.html#fangfa">¶</a></h5><p><a name="dxfIH"></a></p>
<h6 id="train-将此层及其所有子层设置为训练模式。这只会影响某些模块，如-Dropout-和-BatchNorm。"><a href="#train-将此层及其所有子层设置为训练模式。这只会影响某些模块，如-Dropout-和-BatchNorm。" class="headerlink" title="train()将此层及其所有子层设置为训练模式。这只会影响某些模块，如 Dropout 和 BatchNorm。"></a>train()将此层及其所有子层设置为训练模式。这只会影响某些模块，如 Dropout 和 BatchNorm。</h6><p><a name="JanPN"></a></p>
<h4 id="3-2-Linear"><a href="#3-2-Linear" class="headerlink" title="3.2 Linear"></a>3.2 Linear</h4><blockquote>
<p>_class _paddle.nn.Linear(<em>in_features</em>, <em>out_features</em>, <em>weight_attr=None</em>, <em>bias_attr=None</em>, <em>name=None</em>)</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1688545130329-1eed0a74-d639-427b-822b-6eae6d7608b2.png#averageHue=%23faf9f9&amp;clientId=u2f7b84f5-ce8e-4&amp;from=paste&amp;height=202&amp;id=u2815175e&amp;originHeight=252&amp;originWidth=1118&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=43646&amp;status=done&amp;style=none&amp;taskId=uaf8f968d-6a9e-42df-a13f-512bb53ed96&amp;title=&amp;width=894.4" alt="image.png"><br><a name="PDjBF"></a></p>
<h6 id="参数¶-6"><a href="#参数¶-6" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/Linear_cn.html#canshu">¶</a></h6><ul>
<li><strong>in_features</strong> (int) – 线性变换层输入单元的数目。</li>
<li><strong>out_features</strong> (int) – 线性变换层输出单元的数目。</li>
<li><strong>weight_attr</strong> (ParamAttr，可选) – 指定权重参数的属性。默认值为 None，表示使用默认的权重参数属性，将权重参数初始化为 0。具体用法请参见 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/ParamAttr_cn.html#cn-api-fluid-paramattr">ParamAttr</a> 。</li>
<li><strong>bias_attr</strong> (ParamAttr|bool，可选) – 指定偏置参数的属性。bias_attr����_���� 为 bool 类型且设置为 False 时，表示不会为该层添加偏置。bias_attr����_���� 如果设置为 True 或者 None，则表示使用默认的偏置参数属性，将偏置参数初始化为 0。具体用法请参见 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/ParamAttr_cn.html#cn-api-fluid-paramattr">ParamAttr</a>。默认值为 None。</li>
<li><strong>name</strong> (str，可选) - 具体用法请参见 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api_guides/low_level/program.html#api-guide-name">Name</a>，一般无需设置，默认值为 None。<br><a name="gVVNp"></a></li>
</ul>
<h4 id="3-3ConV2D卷积算子"><a href="#3-3ConV2D卷积算子" class="headerlink" title="3.3ConV2D卷积算子"></a>3.3ConV2D卷积算子</h4><blockquote>
<p>_class _paddle.nn.Conv2D(<em>in_channels</em>, <em>out_channels</em>, <em>kernel_size</em>, <em>stride=1</em>, <em>padding=0</em>, <em>dilation=1</em>, <em>groups=1</em>, <em>padding_mode=’zeros’</em>, <em>weight_attr=None</em>, <em>bias_attr=None</em>, <em>data_format=’NCHW’</em>)</p>
</blockquote>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1688892205605-fdbb3f75-f497-468c-a58a-25ee9bf31c94.png#averageHue=%23fbfafa&amp;clientId=u6e39f7ff-7ce6-4&amp;from=paste&amp;height=468&amp;id=u8b806e8d&amp;originHeight=585&amp;originWidth=1098&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=68976&amp;status=done&amp;style=none&amp;taskId=ud1ed6928-88fb-4b0a-b571-4404e849ece&amp;title=&amp;width=878.4" alt="image.png"><br><a name="P1PQb"></a></p>
<h5 id="参数¶-7"><a href="#参数¶-7" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/Conv2D_cn.html#canshu">¶</a></h5><ul>
<li><strong>in_channels</strong> (int) - 输入图像的通道数。</li>
<li><strong>out_channels</strong> (int) - 由卷积操作产生的输出的通道数。</li>
<li><strong>kernel_size</strong> (int|list|tuple) - 卷积核大小。可以为单个整数或包含两个整数的元组或列表，分别表示卷积核的高和宽。如果为单个整数，表示卷积核的高和宽都等于该整数。</li>
<li><strong>stride</strong> (int|list|tuple，可选) - 步长大小。可以为单个整数或包含两个整数的元组或列表，分别表示卷积沿着高和宽的步长。如果为单个整数，表示沿着高和宽的步长都等于该整数。默认值：1。</li>
<li><strong>padding</strong> (int|list|tuple|str，可选) - 填充大小。如果它是一个字符串，可以是”VALID”或者”SAME”，表示填充算法，计算细节可参考上述 padding = “SAME”或 padding = “VALID” 时的计算公式。如果它是一个元组或列表，它可以有 3 种格式：(1)包含 4 个二元组：当 data_format 为”NCHW”时为 [[0,0], [0,0], [padding_height_top, padding_height_bottom], [padding_width_left, padding_width_right]]，当 data_format 为”NHWC”时为[[0,0], [padding_height_top, padding_height_bottom], [padding_width_left, padding_width_right], [0,0]]；(2)包含 4 个整数值：[padding_height_top, padding_height_bottom, padding_width_left, padding_width_right]；(3)包含 2 个整数值：[padding_height, padding_width]，此时 padding_height_top = padding_height_bottom = padding_height， padding_width_left = padding_width_right = padding_width。若为一个整数，padding_height = padding_width = padding。默认值：0。</li>
<li><strong>dilation</strong> (int|list|tuple，可选) - 空洞大小。可以为单个整数或包含两个整数的元组或列表，分别表示卷积核中的元素沿着高和宽的空洞。如果为单个整数，表示高和宽的空洞都等于该整数。默认值：1。</li>
<li><strong>groups</strong> (int，可选) - 二维卷积层的组数。根据 Alex Krizhevsky 的深度卷积神经网络（CNN）论文中的成组卷积：当 group=n，输入和卷积核分别根据通道数量平均分为 n 组，第一组卷积核和第一组输入进行卷积计算，第二组卷积核和第二组输入进行卷积计算，……，第 n 组卷积核和第 n 组输入进行卷积计算。默认值：1。</li>
<li><strong>padding_mode</strong> (str，可选)：填充模式。包括 ‘zeros’, ‘reflect’, ‘replicate’ 或者 ‘circular’。默认值：’zeros’ 。</li>
<li><strong>weight_attr</strong> (ParamAttr，可选) - 指定权重参数属性的对象。默认值为 None，表示使用默认的权重参数属性。具体用法请参见 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/ParamAttr_cn.html#cn-api-fluid-paramattr">ParamAttr</a> 。</li>
<li><strong>bias_attr</strong> （ParamAttr|bool，可选）- 指定偏置参数属性的对象。若 bias_attr 为 bool 类型，只支持为 False，表示没有偏置参数。默认值为 None，表示使用默认的偏置参数属性。具体用法请参见 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/ParamAttr_cn.html#cn-api-fluid-paramattr">ParamAttr</a> 。</li>
<li><strong>data_format</strong> (str，可选) - 指定输入的数据格式，输出的数据格式将与输入保持一致，可以是”NCHW”和”NHWC”。N 是批尺寸，C 是通道数，H 是特征高度，W 是特征宽度。默认值：”NCHW”。<br><a name="Ijrjz"></a></li>
</ul>
<h5 id="属性¶"><a href="#属性¶" class="headerlink" title="属性¶"></a>属性<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/Conv2D_cn.html#shuxing">¶</a></h5><p><a name="eoNzA"></a></p>
<h6 id="weight¶"><a href="#weight¶" class="headerlink" title="weight¶"></a>weight<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/Conv2D_cn.html#weight">¶</a></h6><p>本层的可学习参数，类型为 Parameter<br><a name="ks0JQ"></a></p>
<h6 id="bias¶"><a href="#bias¶" class="headerlink" title="bias¶"></a>bias<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/Conv2D_cn.html#bias">¶</a></h6><p>本层的可学习偏置，类型为 Parameter<br><a name="js1zh"></a></p>
<h4 id="3-4BatchNorm2D批归一化"><a href="#3-4BatchNorm2D批归一化" class="headerlink" title="3.4BatchNorm2D批归一化"></a>3.4BatchNorm2D批归一化</h4><blockquote>
<p>paddle.nn.BatchNorm2D(num_features, momentum=0.9, epsilon=1e-05, weight_attr=None, bias_attr=None, data_format=’NCHW’, name=None):</p>
</blockquote>
<p>可用作卷积和全连接操作的批归一化函数，根据当前批次数据按通道计算的均值和方差进行归一化。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1688975605560-398843a4-575f-40cd-996d-4822045e8063.png#averageHue=%23fdfdfd&amp;clientId=u3735f412-cf91-4&amp;from=paste&amp;height=233&amp;id=ub53af19d&amp;originHeight=291&amp;originWidth=1023&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=27384&amp;status=done&amp;style=none&amp;taskId=u9284fc6b-935e-4204-9bb1-bcc72869113&amp;title=&amp;width=818.4" alt="image.png"><br><a name="VPi26"></a></p>
<h5 id="参数¶-8"><a href="#参数¶-8" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/BatchNorm2D_cn.html#canshu">¶</a></h5><ul>
<li><strong>num_features</strong> (int) - 指明输入 Tensor 的通道数量。</li>
<li><strong>epsilon</strong> (float，可选) - 为了数值稳定加在分母上的值。默认值：1e-05。</li>
<li><strong>momentum</strong> (float，可选) - 此值用于计算 moving_mean 和 moving_var。默认值：0.9。更新公式如上所示。</li>
<li><strong>weight_attr</strong> (ParamAttr|bool，可选) - 指定权重参数属性的对象。如果为 False，则表示每个通道的伸缩固定为 1，不可改变。默认值为 None，表示使用默认的权重参数属性。具体用法请参见 cn_api_ParamAttr 。</li>
<li><strong>bias_attr</strong> (ParamAttr，可选) - 指定偏置参数属性的对象。如果为 False，则表示每一个通道的偏移固定为 0，不可改变。默认值为 None，表示使用默认的偏置参数属性。具体用法请参见 cn_api_ParamAttr 。</li>
<li><strong>data_format</strong> (string，可选) - 指定输入数据格式，数据格式可以为”NCHW”。默认值：“NCHW”。</li>
<li><strong>name</strong> (str，可选) - 具体用法请参见 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api_guides/low_level/program.html#api-guide-name">Name</a>，一般无需设置，默认值为 None。<br><a name="kEE7l"></a></li>
</ul>
<h5 id="返回¶-3"><a href="#返回¶-3" class="headerlink" title="返回¶"></a>返回<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/BatchNorm2D_cn.html#fanhui">¶</a></h5><p>无<br><a name="Y8hlo"></a></p>
<h5 id="形状¶-2"><a href="#形状¶-2" class="headerlink" title="形状¶"></a>形状<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/nn/BatchNorm2D_cn.html#xingzhuang">¶</a></h5><ul>
<li>input：形状为（批大小，通道数，高度，宽度）的 4-D Tensor 或（批大小，通道数，宽度，高度）的 4-D Tensor。</li>
<li>output：和输入形状一样。</li>
</ul>
<p>目前训练时设置 track_running_stats 为 False 是无效的，实际还是会按照 True 的方案保存全局均值和方差。之后的版本会修复此问题。<br><a name="BSQCX"></a></p>
<h3 id="4-paddle-optimizer"><a href="#4-paddle-optimizer" class="headerlink" title="4. paddle.optimizer"></a>4. paddle.optimizer</h3><p><a name="xNk4U"></a></p>
<h3 id="5-paddle-distribute-支撑大规模分布式训练"><a href="#5-paddle-distribute-支撑大规模分布式训练" class="headerlink" title="5.paddle.distribute 支撑大规模分布式训练"></a>5.paddle.distribute 支撑大规模分布式训练</h3><p><a name="dKRzt"></a></p>
<h4 id="5-1init-parallel-env-初始化并行环境"><a href="#5-1init-parallel-env-初始化并行环境" class="headerlink" title="5.1init_parallel_env 初始化并行环境"></a>5.1init_parallel_env 初始化并行环境</h4><p><a name="M2Hzf"></a></p>
<h3 id="6-paddle"><a href="#6-paddle" class="headerlink" title="6.paddle"></a>6.paddle</h3><p><a name="q0Y3W"></a></p>
<h4 id="6-1paddle-DataParallel通过数据并行模式执行动态图模型。"><a href="#6-1paddle-DataParallel通过数据并行模式执行动态图模型。" class="headerlink" title="6.1paddle.DataParallel通过数据并行模式执行动态图模型。"></a>6.1paddle.DataParallel通过数据并行模式执行动态图模型。</h4><blockquote>
<p>_class _paddle.DataParallel(<em>layers</em>, <em>strategy=None</em>, <em>comm_buffer_size=25</em>, <em>last_comm_buffer_size=1</em>, <em>find_unused_parameters=False</em>)</p>
</blockquote>
<p><a name="JHnK9"></a></p>
<h5 id="支持两种使用方式："><a href="#支持两种使用方式：" class="headerlink" title="支持两种使用方式："></a>支持两种使用方式：</h5><ol>
<li>使用 paddle.distributed.spawn 方法启动，例如：</li>
</ol>
<p>python demo.py (spawn need to be called in <strong>main</strong> method)</p>
<pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 用法一：启动train多进程训练，默认使用所有可见的GPU卡。</span>
<span class="token comment" spellcheck="true"># 只传入函数，训练函数不需要任何参数</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    dist<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>train<span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 用法二：传入函数和参数</span>
<span class="token comment" spellcheck="true"># 当训练函数需要一些参数时，利用所有可见设备并行训练</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    dist<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>train<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 用法三：传入函数，参数和进程数目</span>
<span class="token comment" spellcheck="true"># 当训练函数需要参数，仅使用部分可见的设备并行训练</span>
<span class="token comment" spellcheck="true"># 如果当前机器有8张卡,并且均可见，下面的例子将使用0号和1号卡</span>
<span class="token comment" spellcheck="true"># 如果设置CUDA_VISIBLE_DEVICES=4,5,6,7，该例子将会使用4和5号卡</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    dist<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>train<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nprocs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>

<span class="token comment" spellcheck="true"># 用法四：输入函数，参数，进程数目和gpus</span>
<span class="token comment" spellcheck="true"># 如果训练函数需要一些参数，并且只使用部分可见的设备用于并行训练，但是不能设置机器环境变量CUDA_VISIBLE_DEVICES，如该变量为None或所有卡，</span>
<span class="token comment" spellcheck="true"># 通过输入gpus来选择想要使用的卡。</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    dist<span class="token punctuation">.</span>spawn<span class="token punctuation">(</span>train<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>model<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nprocs<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> gpus<span class="token operator">=</span><span class="token string">'4,5'</span><span class="token punctuation">)</span>
</code></pre>
<ol>
<li>使用 paddle.distributed.launch 方法启动，例如：</li>
</ol>
<p>python -m paddle.distributed.launch –selected_gpus=0,1 demo.py<img src="https://cdn.nlark.com/yuque/0/2023/png/34430616/1688715082180-49b9a39d-3e12-43cb-a283-6c92e0955f1d.png#averageHue=%232a2928&amp;clientId=u6aa720ff-6dff-4&amp;from=paste&amp;height=600&amp;id=ue1a82dde&amp;originHeight=750&amp;originWidth=790&amp;originalType=binary&amp;ratio=1.25&amp;rotation=0&amp;showTitle=false&amp;size=101285&amp;status=done&amp;style=none&amp;taskId=u24ea1e85-4dcf-4ca4-b103-cbf6bce51ef&amp;title=&amp;width=632" alt="image.png"><br><a name="AO2cl"></a></p>
<h5 id="参数¶-9"><a href="#参数¶-9" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/DataParallel_cn.html#canshu">¶</a></h5><ul>
<li><strong>Layer</strong> (Layer) - 需要通过数据并行方式执行的模型。</li>
<li><strong>strategy</strong> (ParallelStrategy，可选) - (deprecated) 数据并行的策略，包括并行执行的环境配置。默认为 None。</li>
<li><strong>comm_buffer_size</strong> (int，可选) - 它是通信调用（如 NCCLAllReduce）时，参数梯度聚合为一组的内存大小（MB）。默认值：25。</li>
<li><strong>last_comm_buffer_size</strong> （float，可选）它限制通信调用中最后一个缓冲区的内存大小（MB）。减小最后一个通信缓冲区的大小有助于提高性能。默认值：1。默认值：1</li>
<li><strong>find_unused_parameters</strong> (bool，可选) 是否在模型 forward 函数的返回值的所有张量中，遍历整个向后图。对于不包括在 loss 计算中的参数，其梯度将被预先标记为 ready 状态用于后续多卡间的规约操作。请注意，模型参数的所有正向输出必须参与 loss 的计算以及后续的梯度计算。否则，将发生严重错误。请注意，将 find_unused_parameters 设置为 True 会影响计算性能，因此，如果确定所有参数都参与了 loss 计算和自动反向图的构建，请将其设置为 False。默认值：False。<br><a name="cdwT6"></a></li>
</ul>
<h5 id="返回¶-4"><a href="#返回¶-4" class="headerlink" title="返回¶"></a>返回<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/DataParallel_cn.html#fanhui">¶</a></h5><p>支持数据并行的 Layer。<br><a name="Kre6z"></a></p>
<h4 id="6-2ParamAttr-设置网络参数"><a href="#6-2ParamAttr-设置网络参数" class="headerlink" title="6.2ParamAttr 设置网络参数"></a>6.2ParamAttr 设置网络参数</h4><blockquote>
<p>_class _paddle.ParamAttr(<em>name=None</em>, <em>initializer=None</em>, <em>learning_rate=1.0</em>, <em>regularizer=None</em>, <em>trainable=True</em>, <em>do_model_average=False</em>, <em>need_clip=True</em>)</p>
</blockquote>
<p><a name="DlIeW"></a></p>
<h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul>
<li><strong>name</strong> (str，可选) - 具体用法请参见 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api_guides/low_level/program.html#api-guide-name">Name</a>，一般无需设置，默认值为 None。</li>
<li><strong>initializer</strong> (Initializer，可选) - 参数的初始化方式。默认值为 None，表示权重参数采用 Xavier 初始化方式，偏置参数采用全 0 初始化方式。</li>
<li><strong>learning_rate</strong> (float，可选) - 参数的学习率。实际参数的学习率等于全局学习率乘以参数的学习率，再乘以 learning rate schedule 的系数。</li>
<li><strong>regularizer</strong> (WeightDecayRegularizer，可选) - 正则化方法。支持两种正则化策略：api_paddle_regularizer_L1Decay 、 api_paddle_regularizer_L2Decay，如果在 optimizer (例如 api_paddle_optimizer_SGD ) 中也 设置了正则化，optimizer 中的正则化将被忽略。默认值为 None，表示没有正则化。</li>
<li><strong>trainable</strong> (bool，可选) - 参数是否需要训练。默认值为 True，表示需要训练。</li>
<li><strong>do_model_average</strong> (bool，可选) - 是否做模型平均。默认值为 True。仅在 <a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/static/ExponentialMovingAverage_cn.html#exponentialmovingaverage">ExponentialMovingAverage</a> 下使用。</li>
<li><strong>need_clip</strong> (bool，可选) - 参数是否需要进行梯度裁剪。默认值为 True，表示该参数的梯度会根据优化器中设置的裁剪规则进行裁剪。<br><a name="Z6aXx"></a></li>
</ul>
<h5 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h5><pre class=" language-csharp"><code class="language-csharp">weight_attr<span class="token operator">=</span>paddle<span class="token punctuation">.</span><span class="token function">ParamAttr</span><span class="token punctuation">(</span>
                   initializer<span class="token operator">=</span><span class="token function">Assign</span><span class="token punctuation">(</span><span class="token keyword">value</span><span class="token operator">=</span>w<span class="token punctuation">)</span>
weight_attr <span class="token operator">=</span> paddle<span class="token punctuation">.</span><span class="token function">ParamAttr</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"weight"</span><span class="token punctuation">,</span>
                               learning_rate<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span>
                               regularizer<span class="token operator">=</span>paddle<span class="token punctuation">.</span>regularizer<span class="token punctuation">.</span><span class="token function">L2Decay</span><span class="token punctuation">(</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                               trainable<span class="token operator">=</span>True<span class="token punctuation">)</span> 
</code></pre>
<p><a name="EhSty"></a></p>
<h2 id="二、辅助"><a href="#二、辅助" class="headerlink" title="二、辅助"></a>二、辅助</h2><p><a name="G6On8"></a></p>
<h3 id="1-paddle-summary"><a href="#1-paddle-summary" class="headerlink" title="1.paddle.summary"></a>1.paddle.summary</h3><blockquote>
<p>paddle.summary(net, input_size=None, dtypes=None, input=None)</p>
</blockquote>
<p><a name="hLsdr"></a></p>
<h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul>
<li>net (Layer) - 网络实例，必须是 Layer 的子类。</li>
<li>input_size (tuple|InputSpec|list[tuple|InputSpec) - 输入张量的大小。如果网络只有一个输入，那么该值需要设定为tuple或InputSpec。如果模型有多个输入。那么该值需要设定为list[tuple|InputSpec]，包含每个输入的shape。</li>
<li>dtypes (str，可选) - 输入张量的数据类型，如果没有给定，默认使用 float32 类型。默认值：None<br><a name="GFfvW"></a></li>
</ul>
<h3 id="2-paddle-device"><a href="#2-paddle-device" class="headerlink" title="2.paddle.device"></a>2.paddle.device</h3><p><a name="Ol7fp"></a></p>
<h4 id="2-1-get-device-获取当前的全局设备"><a href="#2-1-get-device-获取当前的全局设备" class="headerlink" title="2.1 get_device() 获取当前的全局设备"></a>2.1 get_device() 获取当前的全局设备</h4><blockquote>
<p>paddle.device.get_device()</p>
</blockquote>
<p>该功能返回当前程序运行的全局设备，返回的是一个类似于 cpu、 gpu:x、 xpu:x、 mlu:x 或者 npu:x 字符串，如果没有设置全局设备，当 cuda 可用的时候返回 gpu:0，当 cuda 不可用的时候返回 cpu 。<br><a name="A5lce"></a></p>
<h4 id="2-2-set-device-设置训练的设备"><a href="#2-2-set-device-设置训练的设备" class="headerlink" title="2.2 set_device()设置训练的设备"></a>2.2 set_device()设置训练的设备</h4><blockquote>
<p>paddle.device.set_device(<em>device</em>)</p>
</blockquote>
<p><a name="cQlgs"></a></p>
<h5 id="参数¶-10"><a href="#参数¶-10" class="headerlink" title="参数¶"></a>参数<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/device/set_device_cn.html#canshu">¶</a></h5><ul>
<li><strong>device</strong> (str)- 此参数确定特定的运行设备，它可以是 cpu、 gpu、 xpu、 mlu、 npu、 gpu:x、 xpu:x、 mlu:x 或者是 npu:x。其中，x 是 GPU、 XPU、 MLU 或者是 NPU 的编号。当 device 是 cpu 的时候，程序在 CPU 上运行，当 device 是 gpu:x 的时候，程序在 GPU 上运行，当 device 是 mlu:x 的时候，程序在 MLU 上运行，当 device 是 npu:x 的时候，程序在 NPU 上运行。<br><a name="sNYTe"></a></li>
</ul>
<h5 id="返回¶-5"><a href="#返回¶-5" class="headerlink" title="返回¶"></a>返回<a href="https://www.paddlepaddle.org.cn/documentation/docs/zh/api/paddle/device/set_device_cn.html#fanhui">¶</a></h5><p>Place，设置的 Place。<br><a name="DsRXx"></a></p>
<h3 id="3-可视化visualDL"><a href="#3-可视化visualDL" class="headerlink" title="3.可视化visualDL"></a>3.可视化visualDL</h3><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#引入VisualDL库，并设定保存作图数据的文件位置</span>
<span class="token keyword">from</span> visualdl <span class="token keyword">import</span> LogWriter
log_writer <span class="token operator">=</span> LogWriter<span class="token punctuation">(</span>logdir<span class="token operator">=</span><span class="token string">"./log"</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">train</span><span class="token punctuation">(</span>model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    model<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    opt <span class="token operator">=</span> paddle<span class="token punctuation">.</span>optimizer<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>learning_rate<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">,</span> parameters<span class="token operator">=</span>model<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    EPOCH_NUM <span class="token operator">=</span> <span class="token number">10</span>
    iter <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> epoch_id <span class="token keyword">in</span> range<span class="token punctuation">(</span>EPOCH_NUM<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> batch_id<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_loader<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment" spellcheck="true">#准备数据，变得更加简洁</span>
            images<span class="token punctuation">,</span> labels <span class="token operator">=</span> data
            images <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>images<span class="token punctuation">)</span>
            labels <span class="token operator">=</span> paddle<span class="token punctuation">.</span>to_tensor<span class="token punctuation">(</span>labels<span class="token punctuation">)</span>
            
            <span class="token comment" spellcheck="true">#前向计算的过程，同时拿到模型输出值和分类准确率</span>
            predicts<span class="token punctuation">,</span> avg_acc <span class="token operator">=</span> model<span class="token punctuation">(</span>images<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>
            <span class="token comment" spellcheck="true">#计算损失，取一个批次样本损失的平均值</span>
            loss <span class="token operator">=</span> F<span class="token punctuation">.</span>cross_entropy<span class="token punctuation">(</span>predicts<span class="token punctuation">,</span> labels<span class="token punctuation">)</span>
            avg_loss <span class="token operator">=</span> paddle<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>loss<span class="token punctuation">)</span>
            
            <span class="token comment" spellcheck="true">#每训练了100批次的数据，打印下当前Loss的情况</span>
            <span class="token keyword">if</span> batch_id <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"epoch: {}, batch: {}, loss is: {}, acc is {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch_id<span class="token punctuation">,</span> batch_id<span class="token punctuation">,</span> avg_loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg_acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                log_writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag <span class="token operator">=</span> <span class="token string">'acc'</span><span class="token punctuation">,</span> step <span class="token operator">=</span> iter<span class="token punctuation">,</span> value <span class="token operator">=</span> avg_acc<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                log_writer<span class="token punctuation">.</span>add_scalar<span class="token punctuation">(</span>tag <span class="token operator">=</span> <span class="token string">'loss'</span><span class="token punctuation">,</span> step <span class="token operator">=</span> iter<span class="token punctuation">,</span> value <span class="token operator">=</span> avg_loss<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                iter <span class="token operator">=</span> iter <span class="token operator">+</span> <span class="token number">100</span>

            <span class="token comment" spellcheck="true">#后向传播，更新参数的过程</span>
            avg_loss<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>
            opt<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>
            opt<span class="token punctuation">.</span>clear_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment" spellcheck="true">#保存模型参数</span>
    paddle<span class="token punctuation">.</span>save<span class="token punctuation">(</span>model<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'mnist.pdparams'</span><span class="token punctuation">)</span>
    
model <span class="token operator">=</span> MNIST<span class="token punctuation">(</span><span class="token punctuation">)</span>
train<span class="token punctuation">(</span>model<span class="token punctuation">)</span>
</code></pre>
<p><code>visualdl --logdir /log --port 8080</code><br><a name="YUwa1"></a></p>
<h3 id="4-paddle-vision计算机视觉高级api"><a href="#4-paddle-vision计算机视觉高级api" class="headerlink" title="4.paddle.vision计算机视觉高级api"></a>4.paddle.vision计算机视觉高级api</h3><p><a name="vFSyE"></a></p>
<h4 id="4-1resnet50-50层resnet网络"><a href="#4-1resnet50-50层resnet网络" class="headerlink" title="4.1resnet50 50层resnet网络"></a>4.1resnet50 50层resnet网络</h4>]]></content>
      <categories>
        <category>基础语法</category>
      </categories>
      <tags>
        <tag>语法</tag>
        <tag>Paddle</tag>
      </tags>
  </entry>
</search>
